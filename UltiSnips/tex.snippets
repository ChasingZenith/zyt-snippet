global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

def findfirstoperator(line):
    index = 0
    depth = 0
    while index < len(line):
        if line[index] == '\s':
            index += 1
            continue
        elif line[index] in ['{', '(']:
            depth += 1
            index += 1
            continue
        elif line[index] in ['}', ')']:
            depth -= 1
            index += 1
            continue
        elif depth <= 0 and line[index] == '=':
            return index
        elif depth <= 0 and all(line[index:].startswith(x) for x in ["\\le", "\\ge", ">", "<", "\\succ", "\\prec", "\\sim", "\\ne", "\\not"]):
            return index
        else:
            index += 1
            continue
    else:
        return len(line) - len(line.lstrip())

def generate_matrix_element(fe, position, shape):
	if re.fullmatch("[a-zA-Z]_11", fe):
		return fe[0] + "{}{}".format(position[0], position[1])
	else:
		return ""

def generate_matrix(prefix, snip):
	info = snip.buffer[snip.line]
	# print(info, snip.snippet_start, snip.snippet_end)
	spacelen = len(info) - len(info.lstrip())
	linfo = info[:snip.snippet_start[1]]
	rinfo = info[snip.snippet_end[1]:]
	info = info[snip.snippet_start[1]:snip.snippet_end[1]]
	# print([linfo, rinfo, info])
	if len(info) > 1 and info[1].isnumeric():
		real_shape = info[:2]
		virtual_shape = info[2:]
	else:
		real_shape = info[0]
		virtual_shape = info[1:]
	if len(real_shape) == 1:
		row_amount = int(real_shape)
		column_amount = int(real_shape)
	else:
		row_amount = int(real_shape[0])
		column_amount = int(real_shape[1])
	if len(virtual_shape) == 0:
		virtual_row_amount = "0"
		virtual_column_amount = "0"
	elif len(virtual_shape) == 1:
		virtual_row_amount = virtual_shape[0]
		virtual_column_amount = virtual_shape[0]
	else:
		virtual_row_amount = virtual_shape[0]
		virtual_column_amount = virtual_shape[1]
	# print(row_amount, column_amount, virtual_row_amount, virtual_column_amount)
	snip.buffer[snip.line] = ''
	displayed = linfo + "\\begin{%cmatrix}\n" % prefix
	def generate_code(i, j, row, column, virtual_row, virtual_column):
		code = """
`!p
vdot = False
hdot = False
i = %d
j = %d
row = %d
column = %d
virtual_row = "%c"
virtual_column = "%c"
if i > 1 and t[j].strip() == "\\\\vdots":
	vdot = True
if j > 1 and t[1 + column * (i - 1)].strip() == "\\\\cdots":
	hdot = True
if vdot and hdot:
	snip.rv = "\\\\ddots"
elif vdot:
	snip.rv = "\\\\vdots"
elif hdot:
	snip.rv = "\\\\cdots"
elif re.match(".*[a-zA-Z]_\{11\}", t[1]):
	if virtual_row == "0":
		snip.rv = re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + str(j) + "}", t[1])
	else:
		vdot = False
		hdot = False
		if %s:
			hdot = True
		if %s:
			vdot = True
		if not vdot and not hdot:
			snip.rv = re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + str(j) + "}", t[1])
		elif vdot and hdot:
			snip.rv = re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + virtual_row + ("-" + str(row - i) if i != row else "") + "," + virtual_column + ("-" + str(column - j) if j != column else "") + "}", t[1])
		elif vdot:
			snip.rv = re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + str(i) + "," + virtual_column + ("-" + str(column - j) if j != column else "") + "}", t[1])
		else:
			snip.rv = re.sub("([a-zA-Z])_\{11\}", "\\g<1>_{" + virtual_row + ("-" + str(row - i) if i != row else "") + "," + str(j) + "}", t[1])
else:
	snip.rv = ""
`
""" % (i, j, row, column, virtual_row, virtual_column, " or ".join(["t[%d].strip() == '\\\\cdots'" % (1 + column * (x - 1)) for x in range(1, i)]) if i > 1 else "False", " or ".join(["t[%d].strip() == '\\\\vdots'" % x for x in range(1, j)]) if j > 1 else "False")
		# if i == 5 and j == 5:
		# 	print(code)
		return code[1:-1]
	if row_amount > 0 and column_amount > 0:
		displayed += " " * (4 + len(linfo)) + "$1 " + ("& " if column_amount > 1 else "\\" * 4)
		index = 2
		for i in range(2, column_amount + 1):
			displayed += "${" + "{}".format(index) + ":" + generate_code(1, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "} " + ("& " if i < column_amount else "\\" * 4)
			index += 1
		displayed += "\n"
		for j in range(2, row_amount + 1):
			displayed += " " * (4 + len(linfo))
			for i in range(1, column_amount + 1):
				displayed += "${" + "{}".format(index) + ":" + generate_code(j, i, row_amount, column_amount, virtual_row_amount, virtual_column_amount) + "} " + ("& " if i < column_amount else "\\" * 4)
				index += 1
			displayed += "\n"
	displayed += " " * len(linfo) + "\\end{%cmatrix}" % prefix + (" " + rinfo if rinfo else "")
	snip.expand_anon(displayed)
endglobal

snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots 
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" wA
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
${1:`!p
selectedcode = [x for x in snip.v.text.split("\n") if x]
for (i, x) in enumerate(selectedcode):
    index = findfirstoperator(x)
    snip.rv += ("" if i == 0 else "    ") + x[:index] + "&" + x[index:] + "\\\\" + ("" if i == len(selectedcode) - 1 else "\n")
`}
\end{align*}
endsnippet

snippet bali "Align with {" bA
\[
\left\{
\begin{align*}
${1:`!p
selectedcode = [x for x in snip.v.text.split("\n") if x]
for (i, x) in enumerate(selectedcode):
    index = findfirstoperator(x)
    snip.rv += ("" if i == 0 else "    ") + x[:index] + "&" + x[index:] + "\\\\" + ("" if i == len(selectedcode) - 1 else "\n")
`}\end{align*}
\]
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 100
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^(.*\))(\^\d|\^{[^{}]+})/' "()^2 frac" wrA
`!p
stripped = match.group(1)
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i:] + match.group(2) + "}"
`{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" w
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

post_jump "generate_matrix('p', snip)"
snippet "pmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "pmat" irw
`!p snip.rv = match.group(1)`
endsnippet

snippet bmat "bmat" w
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

post_jump "generate_matrix('b', snip)"
snippet "bmat\(([1-9]{1,2}[a-zA-Z]{0,2})\)" "bmat" irw
`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet ( "( )" iA
($1) $0
endsnippet

snippet lrp "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

# snippet lr( "left( right)" i
# \left( ${1:${VISUAL}} \right) $0
# endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrB "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet "(?<!\\)suma" "sum of array" wrA
\sum_{${1:i}=${1}^{${2:n}} $0
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet diff "d/dx" w
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet "([\w})\]])tp" "transpose" irA
`!p snip.rv=match.group(1)`^\top
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "exist" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


# context "math()"
# snippet xii "xi" iA
# x_{i}
# endsnippet

priority 100
context "math()"
snippet "\b([a-zA-Z])ii" "?i" riA
`!p snip.rv=match.group(1)`_{i}
endsnippet

priority 101
context "math()"
snippet "(\d[a-zA-Z]|\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)ii" "?i" riA
`!p snip.rv=match.group(1)`_{i}
endsnippet

priority 100
context "math()"
snippet "\b([a-zA-Z])jj" "?j" riA
`!p snip.rv=match.group(1)`_{j}
endsnippet

priority 100
context "math()"
snippet "(\d[a-zA-Z]|\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)jj" "?j" riA
`!p snip.rv=match.group(1)`_{j}
endsnippet

# context "math()"
# snippet yii "yi" iA
# y_{i}
# endsnippet

# context "math()"
# snippet xjj "xj" iA
# x_{j}
# endsnippet

# context "math()"
# snippet yjj "yj" iA
# y_{j}
# endsnippet

priority 100000
context "math()"
snippet "\b([a-zA-Z])p(\d)" "x[n+1]" riA
`!p snip.rv=match.group(1)`_{n+`!p snip.rv=match.group(2)`}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" ia
\mathcal{$1}$0
endsnippet

context "math()"
snippet mbb "mathbb" ia
\mathbb{$1}$0
endsnippet

context "math()"
snippet mrm "mathrm" iA
\mathrm{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "star" iA
^{*}
endsnippet

context "math()"
snippet norm "norm" iA
\|${1:${VISUAL}}\|_{2} $0
endsnippet

context "math()"
snippet abs "abstract value" iA
\left\vert ${1:${VISUAL}} \right\vert $0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|geq|leq|quad|equiv)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} \,\mathrm{d} $0
endsnippet

priority 300
context "math()"
snippet int "integral" wA
\int ${1:${VISUAL}} \mathrm{d} $0
endsnippet

priority 200
context "math()"
snippet '(?<![\\a-zA-Z])(arcsin|arccos|arctan|arccot|arccsc|arcsec)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\Leftrightarrow 
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet ' "prime" iA
^\prime
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet -- "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{${1:$VISUAL}}\\} $0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet


context "math()"
snippet cc "subset" bA
\subseteq 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\mathbb{N}
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\mathbb{R}
endsnippet

snippet PP "Probability" wA
\mathbb{P}
endsnippet

snippet QQ "Q" iA
\mathbb{Q}
endsnippet

snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet equation "equation" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1 & $2\\
	$3 & $4\\
\end{cases}
endsnippet

context "math()"
snippet if "if" wA
\mbox{if }
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1\colon $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1(${4/[\(\)]//g}) = $0
\end{align*}
endsnippet

snippet bigopt "Optimization problem" iA
\begin{align*}
	\min &\quad ${1:f(x)}\\\\
	\text{s.t.} &\quad ${2:g(x)} \leq 0\\\\
				&\quad ${3:h(x)} = 0\\\\
\end{align*}
endsnippet

snippet bigmax "Optimization problem" iA
\begin{align*}
	\max &\quad ${1:f(x)}\\\\
	\text{s.t.} &\quad ${2:g(x)} \leq 0\\\\
				&\quad ${3:h(x)} = 0\\\\
\end{align*}
endsnippet

snippet dfun "Definition of function" iA
$1\colon ${2:\mathbb{R}} \to ${3:\mathbb{R}}, ${4:x} \mapsto $0
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

# priority 10
# context "math()"
# snippet "bar" "bar" riA
# \overline{$1}$0
# endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

# priority 10
# context "math()"
# snippet "hat" "hat" riA
# \hat{$1}$0
# endsnippet

priority 100
context "math()"
snippet "(\\?[a-zA-Z]\w*)hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?[a-zA-Z]\w*)(,,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

# snippet letw "let omega" iA
# Let $\Omega \subset \C$ be open.
# endsnippet

context "math()"
snippet HH "H" iA
\mathbb{H}
endsnippet

context "math()"
snippet mean "Expectation" iA
\mathbb{E}\left[ $1 \right]
endsnippet

context "math()"
snippet DD "D" iA
\mathbb{D}
endsnippet

context "math()"
snippet conv "convex composition" iA
${1:\alpha} ${2:x} + (1 - $1) ${3:y}
endsnippet

context "math()"
snippet range "i = 1, \ldots, n" iA
${1:i} = ${2:1}, \ldots, ${3:n}
endsnippet

context "math()"
snippet eps "epsilon" wA
\epsilon
endsnippet

priority 100
context "math()"
snippet "(?<![\\a-zA-Z])(tr|diag|rank|lcm)" "math function" wrA
\\operatorname{`!p snip.rv = match.group(1)`}
endsnippet

priority 200
context "math()"
snippet "(?<![\\a-zA-Z])(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)" "greek" wrA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet : "colon" iA
\colon
endsnippet

context "math()"
snippet iid "independent and identical distribution" iA
\overset{\text{i.i.d.}}{\sim}
endsnippet

context "math()"
snippet def "define equal" wA
\overset{\underset{\mathrm{def}}{}}{=}
endsnippet

# vim:ft=snippets
